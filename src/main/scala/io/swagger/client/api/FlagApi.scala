/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.CreateFlagRequest
import io.swagger.client.model.Error
import io.swagger.client.model.Flag
import io.swagger.client.model.FlagSnapshot
import io.swagger.client.model.PutFlagRequest
import io.swagger.client.model.SetFlagEnabledRequest
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class FlagApi(
  val defBasePath: String = "http://localhost/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new FlagApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param body create a flag 
   * @return Flag
   */
  def createFlag(body: CreateFlagRequest): Option[Flag] = {
    val await = Try(Await.result(createFlagAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param body create a flag 
   * @return Future(Flag)
   */
  def createFlagAsync(body: CreateFlagRequest): Future[Flag] = {
      helper.createFlag(body)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @return void
   */
  def deleteFlag(flagID: Long) = {
    val await = Try(Await.result(deleteFlagAsync(flagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @return Future(void)
   */
  def deleteFlagAsync(flagID: Long) = {
      helper.deleteFlag(flagID)
  }

  /**
   * 
   * 
   *
   * @param limit the numbers of flags to return (optional)
   * @param enabled return flags having given enabled status (optional)
   * @param description return flags exactly matching given description (optional)
   * @param tags return flags with the given tags (comma separated) (optional)
   * @param descriptionLike return flags partially matching given description (optional)
   * @param key return flags matching given key (optional)
   * @param offset return flags given the offset, it should usually set together with limit (optional)
   * @param preload return flags with preloaded segments and variants (optional)
   * @param deleted return all deleted flags (optional)
   * @return List[Flag]
   */
  def findFlags(limit: Option[Long] = None, enabled: Option[Boolean] = None, description: Option[String] = None, tags: Option[String] = None, descriptionLike: Option[String] = None, key: Option[String] = None, offset: Option[Long] = None, preload: Option[Boolean] = None, deleted: Option[Boolean] = None): Option[List[Flag]] = {
    val await = Try(Await.result(findFlagsAsync(limit, enabled, description, tags, descriptionLike, key, offset, preload, deleted), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param limit the numbers of flags to return (optional)
   * @param enabled return flags having given enabled status (optional)
   * @param description return flags exactly matching given description (optional)
   * @param tags return flags with the given tags (comma separated) (optional)
   * @param descriptionLike return flags partially matching given description (optional)
   * @param key return flags matching given key (optional)
   * @param offset return flags given the offset, it should usually set together with limit (optional)
   * @param preload return flags with preloaded segments and variants (optional)
   * @param deleted return all deleted flags (optional)
   * @return Future(List[Flag])
   */
  def findFlagsAsync(limit: Option[Long] = None, enabled: Option[Boolean] = None, description: Option[String] = None, tags: Option[String] = None, descriptionLike: Option[String] = None, key: Option[String] = None, offset: Option[Long] = None, preload: Option[Boolean] = None, deleted: Option[Boolean] = None): Future[List[Flag]] = {
      helper.findFlags(limit, enabled, description, tags, descriptionLike, key, offset, preload, deleted)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return Flag
   */
  def getFlag(flagID: Long): Option[Flag] = {
    val await = Try(Await.result(getFlagAsync(flagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return Future(Flag)
   */
  def getFlagAsync(flagID: Long): Future[Flag] = {
      helper.getFlag(flagID)
  }

  /**
   * 
   * 
   *
   * @return List[String]
   */
  def getFlagEntityTypes(): Option[List[String]] = {
    val await = Try(Await.result(getFlagEntityTypesAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(List[String])
   */
  def getFlagEntityTypesAsync(): Future[List[String]] = {
      helper.getFlagEntityTypes()
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return List[FlagSnapshot]
   */
  def getFlagSnapshots(flagID: Long): Option[List[FlagSnapshot]] = {
    val await = Try(Await.result(getFlagSnapshotsAsync(flagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return Future(List[FlagSnapshot])
   */
  def getFlagSnapshotsAsync(flagID: Long): Future[List[FlagSnapshot]] = {
      helper.getFlagSnapshots(flagID)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @param body update a flag 
   * @return Flag
   */
  def putFlag(flagID: Long, body: PutFlagRequest): Option[Flag] = {
    val await = Try(Await.result(putFlagAsync(flagID, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @param body update a flag 
   * @return Future(Flag)
   */
  def putFlagAsync(flagID: Long, body: PutFlagRequest): Future[Flag] = {
      helper.putFlag(flagID, body)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return Flag
   */
  def restoreFlag(flagID: Long): Option[Flag] = {
    val await = Try(Await.result(restoreFlagAsync(flagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return Future(Flag)
   */
  def restoreFlagAsync(flagID: Long): Future[Flag] = {
      helper.restoreFlag(flagID)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @param body set flag enabled state 
   * @return Flag
   */
  def setFlagEnabled(flagID: Long, body: SetFlagEnabledRequest): Option[Flag] = {
    val await = Try(Await.result(setFlagEnabledAsync(flagID, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @param body set flag enabled state 
   * @return Future(Flag)
   */
  def setFlagEnabledAsync(flagID: Long, body: SetFlagEnabledRequest): Future[Flag] = {
      helper.setFlagEnabled(flagID, body)
  }

}

class FlagApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createFlag(body: CreateFlagRequest)(implicit reader: ClientResponseReader[Flag], writer: RequestWriter[CreateFlagRequest]): Future[Flag] = {
    // create path and map variables
    val path = (addFmt("/flags"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FlagApi->createFlag")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteFlag(flagID: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def findFlags(limit: Option[Long] = None,
    enabled: Option[Boolean] = None,
    description: Option[String] = None,
    tags: Option[String] = None,
    descriptionLike: Option[String] = None,
    key: Option[String] = None,
    offset: Option[Long] = None,
    preload: Option[Boolean] = None,
    deleted: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[List[Flag]]): Future[List[Flag]] = {
    // create path and map variables
    val path = (addFmt("/flags"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    enabled match {
      case Some(param) => queryParams += "enabled" -> param.toString
      case _ => queryParams
    }
    description match {
      case Some(param) => queryParams += "description" -> param.toString
      case _ => queryParams
    }
    tags match {
      case Some(param) => queryParams += "tags" -> param.toString
      case _ => queryParams
    }
    descriptionLike match {
      case Some(param) => queryParams += "description_like" -> param.toString
      case _ => queryParams
    }
    key match {
      case Some(param) => queryParams += "key" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    preload match {
      case Some(param) => queryParams += "preload" -> param.toString
      case _ => queryParams
    }
    deleted match {
      case Some(param) => queryParams += "deleted" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getFlag(flagID: Long)(implicit reader: ClientResponseReader[Flag]): Future[Flag] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getFlagEntityTypes()(implicit reader: ClientResponseReader[List[String]]): Future[List[String]] = {
    // create path and map variables
    val path = (addFmt("/flags/entity_types"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getFlagSnapshots(flagID: Long)(implicit reader: ClientResponseReader[List[FlagSnapshot]]): Future[List[FlagSnapshot]] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/snapshots")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def putFlag(flagID: Long,
    body: PutFlagRequest)(implicit reader: ClientResponseReader[Flag], writer: RequestWriter[PutFlagRequest]): Future[Flag] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FlagApi->putFlag")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def restoreFlag(flagID: Long)(implicit reader: ClientResponseReader[Flag]): Future[Flag] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/restore")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def setFlagEnabled(flagID: Long,
    body: SetFlagEnabledRequest)(implicit reader: ClientResponseReader[Flag], writer: RequestWriter[SetFlagEnabledRequest]): Future[Flag] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/enabled")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FlagApi->setFlagEnabled")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
