/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.CreateSegmentRequest
import io.swagger.client.model.Error
import io.swagger.client.model.PutSegmentReorderRequest
import io.swagger.client.model.PutSegmentRequest
import io.swagger.client.model.Segment
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class SegmentApi(
  val defBasePath: String = "http://localhost/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SegmentApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @param body create a segment under a flag 
   * @return Segment
   */
  def createSegment(flagID: Long, body: CreateSegmentRequest): Option[Segment] = {
    val await = Try(Await.result(createSegmentAsync(flagID, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @param body create a segment under a flag 
   * @return Future(Segment)
   */
  def createSegmentAsync(flagID: Long, body: CreateSegmentRequest): Future[Segment] = {
      helper.createSegment(flagID, body)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param segmentID numeric ID of the segment 
   * @return void
   */
  def deleteSegment(flagID: Long, segmentID: Long) = {
    val await = Try(Await.result(deleteSegmentAsync(flagID, segmentID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param segmentID numeric ID of the segment 
   * @return Future(void)
   */
  def deleteSegmentAsync(flagID: Long, segmentID: Long) = {
      helper.deleteSegment(flagID, segmentID)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return List[Segment]
   */
  def findSegments(flagID: Long): Option[List[Segment]] = {
    val await = Try(Await.result(findSegmentsAsync(flagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag to get 
   * @return Future(List[Segment])
   */
  def findSegmentsAsync(flagID: Long): Future[List[Segment]] = {
      helper.findSegments(flagID)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param segmentID numeric ID of the segment 
   * @param body update a segment 
   * @return Segment
   */
  def putSegment(flagID: Long, segmentID: Long, body: PutSegmentRequest): Option[Segment] = {
    val await = Try(Await.result(putSegmentAsync(flagID, segmentID, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param segmentID numeric ID of the segment 
   * @param body update a segment 
   * @return Future(Segment)
   */
  def putSegmentAsync(flagID: Long, segmentID: Long, body: PutSegmentRequest): Future[Segment] = {
      helper.putSegment(flagID, segmentID, body)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param body reorder segments 
   * @return void
   */
  def putSegmentsReorder(flagID: Long, body: PutSegmentReorderRequest) = {
    val await = Try(Await.result(putSegmentsReorderAsync(flagID, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param body reorder segments 
   * @return Future(void)
   */
  def putSegmentsReorderAsync(flagID: Long, body: PutSegmentReorderRequest) = {
      helper.putSegmentsReorder(flagID, body)
  }

}

class SegmentApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createSegment(flagID: Long,
    body: CreateSegmentRequest)(implicit reader: ClientResponseReader[Segment], writer: RequestWriter[CreateSegmentRequest]): Future[Segment] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/segments")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling SegmentApi->createSegment")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteSegment(flagID: Long,
    segmentID: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/segments/{segmentID}")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString)
      replaceAll("\\{" + "segmentID" + "\\}", segmentID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def findSegments(flagID: Long)(implicit reader: ClientResponseReader[List[Segment]]): Future[List[Segment]] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/segments")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def putSegment(flagID: Long,
    segmentID: Long,
    body: PutSegmentRequest)(implicit reader: ClientResponseReader[Segment], writer: RequestWriter[PutSegmentRequest]): Future[Segment] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/segments/{segmentID}")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString)
      replaceAll("\\{" + "segmentID" + "\\}", segmentID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling SegmentApi->putSegment")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def putSegmentsReorder(flagID: Long,
    body: PutSegmentReorderRequest)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[PutSegmentReorderRequest]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/segments/reorder")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling SegmentApi->putSegmentsReorder")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
