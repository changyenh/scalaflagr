/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.CreateTagRequest
import io.swagger.client.model.Error
import io.swagger.client.model.Tag
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class TagApi(
  val defBasePath: String = "http://localhost/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new TagApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param body create a tag 
   * @return Tag
   */
  def createTag(flagID: Long, body: CreateTagRequest): Option[Tag] = {
    val await = Try(Await.result(createTagAsync(flagID, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param body create a tag 
   * @return Future(Tag)
   */
  def createTagAsync(flagID: Long, body: CreateTagRequest): Future[Tag] = {
      helper.createTag(flagID, body)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param tagID numeric ID of the tag 
   * @return void
   */
  def deleteTag(flagID: Long, tagID: Long) = {
    val await = Try(Await.result(deleteTagAsync(flagID, tagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @param tagID numeric ID of the tag 
   * @return Future(void)
   */
  def deleteTagAsync(flagID: Long, tagID: Long) = {
      helper.deleteTag(flagID, tagID)
  }

  /**
   * 
   * 
   *
   * @param limit the numbers of tags to return (optional)
   * @param offset return tags given the offset, it should usually set together with limit (optional)
   * @param valueLike return tags partially matching given value (optional)
   * @return List[Tag]
   */
  def findAllTags(limit: Option[Long] = None, offset: Option[Long] = None, valueLike: Option[String] = None): Option[List[Tag]] = {
    val await = Try(Await.result(findAllTagsAsync(limit, offset, valueLike), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param limit the numbers of tags to return (optional)
   * @param offset return tags given the offset, it should usually set together with limit (optional)
   * @param valueLike return tags partially matching given value (optional)
   * @return Future(List[Tag])
   */
  def findAllTagsAsync(limit: Option[Long] = None, offset: Option[Long] = None, valueLike: Option[String] = None): Future[List[Tag]] = {
      helper.findAllTags(limit, offset, valueLike)
  }

  /**
   * 
   * 
   *
   * @param flagID numeric ID of the flag 
   * @return List[Tag]
   */
  def findTags(flagID: Long): Option[List[Tag]] = {
    val await = Try(Await.result(findTagsAsync(flagID), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param flagID numeric ID of the flag 
   * @return Future(List[Tag])
   */
  def findTagsAsync(flagID: Long): Future[List[Tag]] = {
      helper.findTags(flagID)
  }

}

class TagApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createTag(flagID: Long,
    body: CreateTagRequest)(implicit reader: ClientResponseReader[Tag], writer: RequestWriter[CreateTagRequest]): Future[Tag] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/tags")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling TagApi->createTag")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteTag(flagID: Long,
    tagID: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/tags/{tagID}")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString)
      replaceAll("\\{" + "tagID" + "\\}", tagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def findAllTags(limit: Option[Long] = None,
    offset: Option[Long] = None,
    valueLike: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Tag]]): Future[List[Tag]] = {
    // create path and map variables
    val path = (addFmt("/tags"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    valueLike match {
      case Some(param) => queryParams += "value_like" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def findTags(flagID: Long)(implicit reader: ClientResponseReader[List[Tag]]): Future[List[Tag]] = {
    // create path and map variables
    val path = (addFmt("/flags/{flagID}/tags")
      replaceAll("\\{" + "flagID" + "\\}", flagID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
